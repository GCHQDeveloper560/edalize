import os
import logging
import shutil

from collections import OrderedDict
from edalize.edatool import Edatool

logger = logging.getLogger(__name__)

class Xsim(Edatool):

    argtypes = ['plusarg', 'vlogdefine', 'vlogparam', 'generic']

    run_template = "xsim-run.tcl.j2"

    MAKEFILE_TEMPLATE="""#Auto generated by Edalize
include config.mk

all: xsim.dir/$(TARGET)/xsimk

xsim.dir/$(TARGET)/xsimk: $(patsubst %,xsim.dir/$(TARGET)/xsc/%.so,$(DPI_MODULES))
	xelab $(TOPLEVEL) -prj $(TARGET).prj -snapshot $(TARGET) $(patsubst %,-sv_lib %,$(DPI_MODULES)) $(patsubst %,-sv_root %,$(dir $^)) $(XELAB_ARGS)

run: xsim.dir/$(TARGET)/xsimk
	xsim --tclbatch edalize_run.tcl $(XSIM_OPTIONS) $(TARGET) $(EXTRA_OPTIONS)

run-gui: xsim.dir/$(TARGET)/xsimk
	xsim --gui $(XSIM_OPTIONS) $(TARGET) $(EXTRA_OPTIONS)
"""

    CONFIG_MK_TEMPLATE = """#Auto generated by Edalize
TARGET        = {target}
TOPLEVEL      = {toplevel}

VLOG_DEFINES  = {vlog_defines}
VLOG_INCLUDES = {vlog_includes}
VLOG_OPTIONS  = $(VLOG_DEFINES) $(VLOG_INCLUDES)
GEN_PARAMS    = {gen_params}

XELAB_OPTIONS =	{xelab_options}
XSIM_OPTIONS  = {xsim_options}

SDF_OPTIONS   = {sdf_options}
XELAB_ARGS    = $(VLOG_OPTIONS) $(GEN_PARAMS) $(SDF_OPTIONS) $(XELAB_OPTIONS)
XSC_OPTIONS   = {xsc_options}

DPI_MODULES   = {dpi_modules}
"""

    VPI_MAKE_SECTION = """
{name}_LIBS    := {libs}
{name}_LIBDIRS := {libdirs}
{name}_INCS    := {incs}
{name}_SRCS    := {srcs}

{name}_COMPILE_OPTS =
{name}_LINK_OPTS =

ifneq ($(strip $({name}_INCS)),)
{name}_COMPILE_OPTS += --gcc_compile_options "$({name}_INCS)"
endif

ifneq ($(strip $({name}_LIBDIRS) $({name}_LIBS)),)
{name}_LINK_OPTS += --gcc_link_options "$({name}_LIBDIRS) $({name}_LIBS)"
endif

xsim.dir/$(TARGET)/xsc/{name}.so:
	xsc -o $@ $({name}_COMPILE_OPTS) $({name}_LINK_OPTS) $(XSC_OPTIONS) $({name}_SRCS)

.PHONY: clean_{name}
clean_{name}:
	$(RM) xsim.dir/$(TARGET)/xsc/{name}.so
"""

    @classmethod
    def get_doc(cls, api_ver):
        if api_ver == 0:
            return {'description' : "XSim simulator from the Xilinx Vivado suite",
                    'lists' : [
                        {'name' : 'xelab_options',
                         'type' : 'String',
                         'desc' : 'Additional options for compilation with xelab'},
                        {'name' : 'xsim_options',
                         'type' : 'String',
                         'desc' : 'Additional run options for XSim'},
                        {"name": "logged_hdl_objs",
                         "type": "String",
                         "desc": 'Pattern for HDL objects that should be logged as VCD/SAIF (e.g. "-r /my_tb/*" or "/tb/uut/s1 /tb/uut/q*")'},
                        ]}

    def configure_main(self):
        self._write_config_files()
        self._write_run_script()

    def _write_run_script(self):
        hdl_objs = self.tool_options.get("logged_hdl_objs", [])

        # Use Jinja to render the TCL file to avoid a total mess of quoted braces.

        # Handle cases like "top glbl" or just "top"
        name = self.toplevel.split()[0]

        self.render_template(
            self.run_template,
            "edalize_run.tcl",
            {"name": name, "logged_hdl_objs": hdl_objs},
        )

    def _write_config_files(self):
        with open(os.path.join(self.work_root, self.name+'.prj'),'w') as f:
            (src_files, self.incdirs) = self._get_fileset_files()
            sdf_options = []
            sdf_map = {"min": "--sdfmin", "typ": "--sdftyp", "max": "--sdfmax"}
            for src_file in src_files:
                cmd = ""
                if src_file.file_type.startswith("verilogSource"):
                    cmd = 'verilog'
                elif src_file.file_type == 'vhdlSource-2008':
                    cmd = 'vhdl2008'
                elif src_file.file_type.startswith("vhdlSource"):
                    cmd = 'vhdl'
                elif src_file.file_type.startswith("systemVerilogSource"):
                    cmd = 'sv'
                elif src_file.file_type == "SDF":

                    # SDF files aren't included in the project file. Use sdf_type to determine
                    # whether to copy the SDF to the simulation directory (default) for use with
                    # the $sdf_annotate Verilog task or to add the SDF to the xelab command line
                    # using command line arguments of the form
                    #
                    # --sdf[min|typ|max] [optional? instance=]file.sdf

                    if src_file.sdf_type == "copy":
                        basename = os.path.basename(src_file.name)
                        if not os.path.exists(os.path.join(self.work_root, basename)):
                            shutil.copy(src_file.name, self.work_root)
                    elif src_file.sdf_type in sdf_map:
                        sdf_options.append(sdf_map[src_file.sdf_type])
                        if src_file.sdf_instance:
                            sdf_options.append("{}={}".format(src_file.sdf_instance, src_file.name))
                        else:
                            sdf_options.append(src_file.name)
                    else:
                        _s = "{} has unknown sdf_type '{}'"
                        logger.warning(_s.format(src_file.name, src_file.sdf_type))

                elif src_file.file_type in ["user"]:
                    pass
                else:
                    _s = "{} has unknown file type '{}'"
                    logger.warning(_s.format(src_file.name, src_file.file_type))
                if cmd:
                    if src_file.logical_name:
                        lib = src_file.logical_name
                    else:
                        lib = 'work'
                    f.write('{} {} {}\n'.format(cmd, lib, src_file.name))

        with open(os.path.join(self.work_root, 'config.mk'), 'w') as f:
            vlog_defines  = ' '.join(['--define {}={}'.format(k,v) for k,v, in self.vlogdefine.items()])
            vlog_includes = ' '.join(['-i '+k for k in self.incdirs])

            # Both parameters and generics use the same --generic_top argument
            # so warn if there are overlapping values
            common_vals = set(self.vlogparam).intersection(set(self.generic))
            if common_vals != set():
                _s = "Common values for vlogparam and generic: {}"
                logger.warning(_s.format(common_vals))

            gen_param = OrderedDict(self.vlogparam)
            gen_param.update(self.generic)
            gen_param_args = " ".join(
                [
                    "--generic_top {}={}".format(k, self._param_value_str(v))
                    for k, v in gen_param.items()
                ]
            )

            dpi_modules = ' '.join([m["name"] for m in self.vpi_modules])

            xelab_options = ' '.join(self.tool_options.get('xelab_options', []))
            xsim_options  = ' '.join(self.tool_options.get('xsim_options' , []))
            sdf_options   = ' '.join(sdf_options)
            xsc_options = ' '.join(self.tool_options.get('xsc_options', []))

            f.write(self.CONFIG_MK_TEMPLATE.format(target=self.name,
                                                   toplevel=self.toplevel,
                                                   vlog_defines = vlog_defines,
                                                   vlog_includes = vlog_includes,
                                                   gen_params = gen_param_args,
                                                   xelab_options = xelab_options,
                                                   xsim_options  = xsim_options,
                                                   sdf_options = sdf_options,
                                                   xsc_options = xsc_options,
                                                   dpi_modules=dpi_modules))

        with open(os.path.join(self.work_root, 'Makefile'), 'w') as f:
            f.write(self.MAKEFILE_TEMPLATE)
            for vpi_module in self.vpi_modules:
                _incs = ["-I" + s for s in vpi_module["include_dirs"]]
                _libdirs = ["-L" + d for d in vpi_module["lib_dirs"]]
                _libs = ["-l" + l for l in vpi_module["libs"]]
                _srcs = vpi_module["src_files"]
                f.write(
                    self.VPI_MAKE_SECTION.format(
                        name=vpi_module["name"],
                        libs=" ".join(_libs),
                        libdirs=" ".join(_libdirs),
                        incs=" ".join(_incs),
                        srcs=" ".join(_srcs),
                    )
                )

    def run_main(self):
        args = ['run']
        # Plusargs
        if self.plusarg:
            _s = '--testplusarg {}={}'
            args.append('EXTRA_OPTIONS='+' '.join([_s.format(k, v) for k,v in self.plusarg.items()]))

        self._run_tool('make', args)
